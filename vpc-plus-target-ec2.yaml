Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  
  KeyNameParameter:
    Type: String
    Description: Enter key name

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Description: Enter t2.micro, t2.small, t2.medium. Default is t2.micro.

  ImageIdParameter:
    Type: String
    Default: ami-0742b4e673072066f
    AllowedValues:
      - ami-0742b4e673072066f
      - ami-042e8287309f5df03 
    Description: ami-0742b4e673072066f is Amazon Linux 2 x86 in us-east-1, ami-042e8287309f5df03 is x86 Ubuntu 20.04 in us-east-1 

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            # RoleName: "CloudWatchFullAccess-AWSvsNewRelic"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
            Description: "Allows EC2 instances to call AWS services on your behalf."
  IAMProfile5:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            Roles:
            - Ref: IAMRole5
  DemoSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          #VpcId: "vpc-d88a99be"
          VpcId: !Ref VPC
          GroupDescription: Demo Security Group For Single Host
          SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
          - CidrIp: 0.0.0.0/0
            FromPort: 9100
            IpProtocol: tcp
            ToPort: 9100
          - CidrIp: 0.0.0.0/0
            FromPort: 9090
            IpProtocol: tcp
            ToPort: 9090
          - CidrIp: 0.0.0.0/0
            FromPort: 3000
            IpProtocol: tcp
            ToPort: 3000
          - CidrIp: 0.0.0.0/0
            FromPort: 3100
            IpProtocol: tcp
            ToPort: 3100
  EC2Instance:
        Type: "AWS::EC2::Instance"
        Metadata:
              AWS::CloudFormation::Init:
                config:
                  files:
                    /tmp/cfinit.txt:
                      content: !Sub |
                        did we make it here?
                      mode: "000644"
                      owner: "root"
                      group: "root"
        Properties:
            IamInstanceProfile: !Ref IAMProfile5
            ImageId: !Ref ImageIdParameter
            InstanceType: !Ref InstanceTypeParameter
            KeyName: !Ref KeyNameParameter 
            # AvailabilityZone: "us-east-1b"
            # AvailabilityZone: !Ref AZParameter
            # SubnetId: "subnet-1792365f"
            SubnetId: !Ref PublicSubnet1
            BlockDeviceMappings:
              - DeviceName: /dev/xvda
                Ebs:
                  VolumeSize: 20
            EbsOptimized: false
            SecurityGroupIds: 
              - !Ref DemoSecurityGroup     
              #- "sg-14ae545d"
            SourceDestCheck: true
            UserData:
             Fn::Base64: !Sub |
                 #!/bin/bash -ex
               
                 # STEP 1: basic udpates
                 yum update -y
                 yum install git -y
                 # yum install stress stress-ng -y
                 
                 # STEP 7: Install Docker
                 amazon-linux-extras install docker
                 service docker start
                 usermod -a -G docker ec2-user
            Tags: 
              - 
                Key: "Name"
                Value: !Join [ "-", ["Sandbox", !Ref AWS::StackName ] ]
                #Value: "Cloudwatch sandbox"
                #Value: !Join [ "-", [!Ref EC2Instance, !Ref AWS::StackName ] ]
              - 
                Key: "Project"
                Value: "edge-workspace" 

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  EC2InstanceOutput:
    Description: "The Instance ID of the EC2"
    Value: !Ref EC2Instance

  EC2InstancePrivateIP:
    Description: "The Private IP of the EC2"
    Value: !GetAtt EC2Instance.PrivateIp

  EC2InstancePublicIP:
    Description: "The Public IP of the EC2"
    Value: !GetAtt EC2Instance.PublicIp

  EC2InstanceExpandedOutput:
    Description: "The Instance ID of the EC2"
    Value: !Join [ "-", [!Ref EC2Instance, !Ref AWS::StackName ] ]
